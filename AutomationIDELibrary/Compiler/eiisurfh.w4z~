using System.Collections.Generic;
using System.Threading.Tasks;
using System.Windows.Forms;
using AutomationIDELibrary.ReservedKeyWords;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;
using System;
using System.IO;
using OpenQA.Selenium;

namespace AutomationIDELibrary.Compiler
{
    public class Compiler
    {
        public static List<string> Lines = new List<string>();
        public FirefoxDriver FireFoxDriver;
        public ChromeDriver ChromeDriver;
        private bool _dispose = true;

        public void BuildFireFox(string webpage = null)
        {
            new Compiler().StartFireFoxDriversAsync(webpage); // Creates a new compiler then does the set script
        }

        public void BuildChrome(string webpage = null)
        {
            new Compiler().StartChromeDriversAsync(webpage); // Creates a new compiler then does the set script
        }

        public void Build()
        {
            if (!Directory.Exists("Project")) return;
            foreach (var file in Directory.GetFiles("Project"))
            {
                if (!file.Contains(".AL")) continue;
                foreach (var line in File.ReadAllLines(file)) Lines.Add(line);
            }
        }

        public Task StartChromeDriversAsync(string webpage = null)
        {
            var options = new ChromeOptions();
            ChromeDriver = new ChromeDriver(options);
            var chromeDriverWait = new WebDriverWait(ChromeDriver, TimeSpan.FromSeconds(15));
            BaseDriversTask(driver:ChromeDriver, webDriverWait:chromeDriverWait, chromeOptions:options, webpage: webpage);
            return Task.CompletedTask;
        }

        public Task StartFireFoxDriversAsync(string webpage = null)
        {
            var options = new FirefoxOptions();
            FireFoxDriver = new FirefoxDriver(options);
            var fireFoxDriverWait = new WebDriverWait(FireFoxDriver, TimeSpan.FromSeconds(15));
            BaseDriversTask(driver:FireFoxDriver, webDriverWait:fireFoxDriverWait, firefoxOptions:options, webpage: webpage);
            return Task.CompletedTask;
        }

        public Task BaseDriversTask(IWebDriver driver, WebDriverWait webDriverWait, FirefoxOptions firefoxOptions = null, ChromeOptions chromeOptions = null, string webpage = null)
        {
            // Checks if the first line has the target webpage
            if (Lines[0].StartsWith("--target", StringComparison.Ordinal)) webpage = Lines[0].Remove(0, 8);
            if (Lines.Contains("--headless")) // Checks if the script has the arguments headless
            {
                firefoxOptions?.AddArguments("--headless");
                chromeOptions?.AddArguments("--headless");
            }

            if (Lines.Contains("--noDispose")) _dispose = false; // Disposes the script after it is ran
            driver.Navigate().GoToUrl(webpage); // goes to the webpage stated at the beginning of the script 

            var function = new Functions(); // The defined functions ran by the keywords
            foreach (var line in Lines) // Checks each line for the defined keywords used by functions
            {
                switch (line)
                {
                    case string l when l.Contains("Click"): function.ClickAsync(line, webDriverWait); break;
                    case string l when l.Contains("SendKeys"): function.SendKeysAsync(line, webDriverWait); break;
                    case string l when l.Contains("Submit"): function.SubmitAsync(line, webDriverWait); break;
                }
            }

            Lines.RemoveRange(0, Lines.Count); // Clears the list so the script can be ran again
            if (_dispose) driver.Dispose(); // Disposes only if the script says to dispose
            return Task.CompletedTask;
        }

        public Task ReadTextBoxLinesAsync(TextBox textBox)
        {
            foreach (var line in textBox.Lines) Lines.Add(line); //Adds each line to the compiler line list
            return Task.CompletedTask;
        }
    }
}